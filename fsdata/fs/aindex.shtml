<!DOCTYPE html>
<!-- This is the home page. Content is filled by SSI -->
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no">
		<link rel="stylesheet" type="text/css" href="css/siimple.min.css">
		<link rel="stylesheet" type="text/css" href="css/style.css">
		<link rel="icon" type="image/x-icon" href="img/favicon.ico">
		<title>Pico_w_connection_manager Demo</title>
	</head>
	<body> 
		<ul class="navbar">
			<li><a href="/">Home</a></li>
			<li><a class="active" href="aindex">Ajax-Home</a></li>
			<li><a href="about">About</a></li>
		</ul>
		<div class="grid main">
			<h1>Pico_w_connection_manager + Web Server Demo</h1>

			<div class="alert alert-done">HTTP Server is up and running.</div>

			<p>The switch below will allow you to turn the Pico W's LED on or off.</p>

			<div class="cover" align="center">
				<div class="onoffswitch">
					<input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="led-switch" onclick="ledupdate();">
					<label class="onoffswitch-label" for="led-switch">
						<span class="onoffswitch-inner"></span>
						<span class="onoffswitch-switch"></span>
					</label>
				</div>
			</div>

			<h1>Server Status</h1>
			<table class="table table-striped">
				<tr>
					<td><b>LED state:</b></td>
					<td id="ledState"><!--#led--></td>
				</tr>
			</table>

			<h1>How it works</h1>
			<p>This web page uses HTML, CSS and JavaScript to render the switch. In response to the onClick event,
				the switch sends an Ajax POST request to the server that requests the LED to be on or off. The server uses the 
				new state of the LED to send the new LED state encoded in JSON in the POST response. This state is used
				to set the <code>"ledState"</code> text and the <code>checked</code> state of the switch. The server set the
				initial value of <code>"ledState"</code> using SSI. The switch synchronizes to the initial <code>"ledState"</code>
				in the <code>window.onload</code> function.
			</p>
		</div>

		<script>
			const pollLedState = {
				reqLedState() {
					this.req = new XMLHttpRequest();
					this.req.onload = () => { if (this.req.readyState == this.req.DONE) {
							let respCode = this.req.status;
							if (respCode == 200) {
								let data = JSON.parse(this.req.responseText);
								let ls = document.getElementById('ledState').innerHTML;
								if (ls != data.ledState) {
									document.getElementById('ledState').innerHTML=data.ledState;
									document.getElementById('led-switch').checked = (data.ledState == 'On');
								}
							}
							this.req = undefined;
							this.setup();
						}
					};
					this.req.onerror = () => {
						this.req = undefined;
						this.setup();
					};
					this.req.onabort = () => {
						this.req = undefined;
					};
					this.req.open("GET","/ledState.json", true);
					this.req.send();
					this.timeoutId = undefined;
				},
				setup() {
					if (typeof this.timeoutId === 'number') {
						this.cancel();
					}
					this.timeoutId = setTimeout(()=>{ this.reqLedState();}, 1000); // poll the LED state from the server one second from now.
				},
				cancel() {
					if (this.timeoutId != undefined) {
						clearTimeout(this.timeoutId);
					}
					if (this.req != undefined) {
						this.req.abort();
					}
				}
			};
			window.onload = function () {
				let ls = document.getElementById('ledState').innerHTML;
				document.getElementById('led-switch').checked = (ls == 'On');
				pollLedState.setup();
			};
			function ledupdate() {
				pollLedState.cancel();
				let req = new XMLHttpRequest();
				req.open("POST", "/ledStatePost.json", true);
				req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
				req.onload = function() {
					let state = this.readyState;
					let respCode = req.status;
					//console.log("POST req.onload called. readyState="+state+" status="+respCode);
					if (state == this.DONE) {
						if (respCode == 201) {
							let data = JSON.parse(this.responseText);
							if (data != null) {
								//console.log("success:"+data.ledState);
								document.getElementById('ledState').innerHTML=data.ledState;
								document.getElementById('led-switch').checked = (data.ledState == 'On');
							}
						}
						else {
							// request was rejected; put the switch back
							let ls = document.getElementById('ledState').innerHTML;
							document.getElementById('led-switch').checked = (ls == 'On');
							if (respCode == 429 || respCode == 404) {
								//console.log(this.responseText);
                                // Replace the current page
                                document.open();
                                document.write(this.responseText);
                                document.close();
							}
						}
						pollLedState.setup();
					}
				};
				req.onerror = function() {
					//console.log("request.error called.");
					// there was an error. Make sure the switch state and text is in sync
					let ls = document.getElementById('ledState').innerHTML;
					document.getElementById('led-switch').checked = (ls == 'On');
					pollLedState.setup();
				};
				req.onabort = function() {
					// there was an abort. Make sure the switch state and text is in sync
					let ls = document.getElementById('ledState').innerHTML;
					document.getElementById('led-switch').checked = (ls == 'On');
					pollLedState.setup();
				};
				var data = document.getElementById('led-switch').checked ? {"ledState":"On"} : {"ledState":"Off"};
				req.send(JSON.stringify(data));
			}
		</script>
	</body>
</html>